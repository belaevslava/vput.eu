{"version":3,"sources":["templates/pages/page-search/page-search.scss","templates/pages/page-search/page-search.css","templates/library.blocks/bootstrap/mixins/_breakpoints.scss"],"names":[],"mappings":"AAEA,4C,CAEI,U,CCAJ,gE,CDFA,6E,CAMI,U,CAIJ,gC,CACE,mB,CE+CE,0BF3CF,+C,CACE,iB,AE0CA,yBFrCF,Y,CACE,c,CACA,Q,CACA,M,CACA,O,CACA,Q,CAEF,8B,CACE,e,CACA,iB,CACA,K,CACA,Q,CACA,M,CAEF,2B,CACE,iB,CAEF,iB,CACE,iB,CACA,K,CACA,Q,CACA,O,CACA,S,CACA,Q,CAEF,iE,CAEI,iB,CACA,Y,CACA,qB,CACA,kB,CACA,iB","file":"page-search.css","sourcesContent":["@import \"../../library.blocks/bootstrap/bootstrap-reboot\";\r\n\r\n.page-search__form-search-offers {\r\n  .form-group {\r\n    flex: 1 20%;\r\n  }\r\n  .form-search-offers__search-by-complexes-col,\r\n  .form-search-offers__cityId-col {\r\n    flex: 1 40%;\r\n  }\r\n}\r\n\r\n.form-search-offers__show-booked {\r\n  margin-bottom: .5rem;\r\n}\r\n\r\n@include media-breakpoint-up(xl) {\r\n  .form-search-offers__search-by-complexes-button {\r\n    max-width: 250px;\r\n  }\r\n}\r\n\r\n@include media-breakpoint-up(lg) {\r\n  .page-search {\r\n    position: fixed;\r\n    top: 66px;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n  }\r\n  .page-search__search-container {\r\n    overflow-y: auto;\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n  }\r\n  .page-search__map-container {\r\n    position: relative;\r\n  }\r\n  .page-search__map {\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    padding: 0;\r\n    margin: 0;\r\n  }\r\n  .page-search__form-search-offers {\r\n    .form-search-offers__show-booked {\r\n      position: absolute;\r\n      bottom: -36px;\r\n      background-color: $white;\r\n      padding-right: $custom-control-spacer-x;\r\n      margin-bottom: 0;\r\n    }\r\n  }\r\n}",".page-search__form-search-offers .form-group {\n  flex: 1 20%; }\n\n.page-search__form-search-offers .form-search-offers__search-by-complexes-col,\n.page-search__form-search-offers .form-search-offers__cityId-col {\n  flex: 1 40%; }\n\n.form-search-offers__show-booked {\n  margin-bottom: .5rem; }\n\n@media (min-width: 1300px) {\n  .form-search-offers__search-by-complexes-button {\n    max-width: 250px; } }\n\n@media (min-width: 992px) {\n  .page-search {\n    position: fixed;\n    top: 66px;\n    left: 0;\n    right: 0;\n    bottom: 0; }\n  .page-search__search-container {\n    overflow-y: auto;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0; }\n  .page-search__map-container {\n    position: relative; }\n  .page-search__map {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    padding: 0;\n    margin: 0; }\n  .page-search__form-search-offers .form-search-offers__show-booked {\n    position: absolute;\n    bottom: -36px;\n    background-color: #fff;\n    padding-right: 1rem;\n    margin-bottom: 0; } }\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}